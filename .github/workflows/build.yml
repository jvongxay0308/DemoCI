name: Build Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  security-events: write
  contents: read

jobs:
  go:
    name: Go
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: "1.25"
      - name: Display Go version
        run: go version
      - name: Run Gofmt
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Gofmt errors found:"
            gofmt -l .
            echo "Please run 'gofmt -w .' to fix the errors."
            exit 1
          fi
      - name: Run Govet
        run: go vet -all ./...
      - name: Run Misspell
        run: |
          [ ! -f misspell ] && go install github.com/client9/misspell/cmd/misspell@latest
          misspell -error ./...
      - uses: actions/checkout@v5
      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.22.8
        with:
          args: "-nosec=true -no-fail -fmt sarif -out gosec.sarif ./..."
      - name: Upload Gosec SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
      - uses: actions/checkout@v5
      - name: Run Govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: "1.25"
          go-package: ./...
          output-format: sarif
          output-file: govulncheck.sarif
      - name: Upload Govulncheck SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: govulncheck.sarif
      # - name: Staticcheck
      #   run: |
      #     [ ! -f staticcheck ] && go install honnef.co/go/tools/cmd/staticcheck@latest
      #     staticcheck ./...
      - uses: actions/checkout@v5
      - name: Run Staticcheck
        uses: dominikh/staticcheck-action@v1
        with:
          version: latest # Specify a specific version or 'latest'
          cache-key: ${{ runner.os }}-staticcheck-${{ hashFiles('**/*.go') }}
      - uses: actions/checkout@v5
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest # Specify a specific version or 'latest'
          args: --timeout=5m # Example: adjust timeout if needed

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600

  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [go, sonarqube]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          sbom: true
          push: true
          tags: "ghcr.io/${{ github.repository }}:${{ github.sha }}, ghcr.io/${{ github.repository }}:latest"
